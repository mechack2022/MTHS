#version: '3.8'
#
#services:
#  postgres:
#    image: postgres:latest
#    restart: always
#    volumes:
#      - ./pgdata:/var/lib/postgresql/data
#    environment:
#      POSTGRES_DB: healthcare_db
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: mechack200
#    ports:
#      - "5433:5432"
#    networks:
#      - local
#
#  mailhog:
#    image: mailhog/mailhog:latest
#    restart: always
#    ports:
#      - "8025:8025"  # Web UI
#      - "1025:1025"  # SMTP
#    networks:
#      - local
#  minio:
#    image: minio/minio:latest
#    restart: always
#    container_name: healthcare_minio
#    ports:
#      - "9000:9000"   # API endpoint
#      - "9001:9001"   # Web Console
#    environment:
#      MINIO_ROOT_USER: admin
#      MINIO_ROOT_PASSWORD: mechack200
#    volumes:
#      - ./minio-data:/data
#    command: [ "server", "/data", "--console-address", ":9001" ]
#    networks:
#        - local
#    healthcheck:
#        test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
#        interval: 30s
#        timeout: 20s
#        retries: 3
#
#    # Auto-create buckets for your healthcare app
#  minio-setup:
#      image: minio/mc:latest
#      depends_on:
#        - minio
#      networks:
#        - local
#      entrypoint: >
#        /bin/sh -c "
#        echo 'Waiting for MinIO to start...';
#        sleep 10;
#        /usr/bin/mc alias set healthcare http://minio:9000 admin mechack200;
#        /usr/bin/mc mb healthcare/patient-documents --ignore-existing;
#        /usr/bin/mc mb healthcare/profile-images --ignore-existing;
#        /usr/bin/mc mb healthcare/medical-reports --ignore-existing;
#        /usr/bin/mc mb healthcare/prescriptions --ignore-existing;
#        /usr/bin/mc policy set public healthcare/profile-images;
#        /usr/bin/mc policy set private healthcare/patient-documents;
#        /usr/bin/mc policy set private healthcare/medical-reports;
#        /usr/bin/mc policy set private healthcare/prescriptions;
#        echo 'Healthcare buckets created and configured successfully!';
#        "
#networks:
#  local:
#    driver: bridge
#

version: '3.8'


services:
  postgres:
    image: postgres:latest
    restart: always
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: healthcare_db
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5433:5432"
    networks:
      - local

  mailhog:
    image: mailhog/mailhog:latest
    restart: always
    ports:
      - "8025:8025"
      - "1025:1025"
    networks:
      - local

  minio:
    image: minio/minio:latest
    restart: always
    container_name: healthcare_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    volumes:
      - ./minio-data:/data
    command: [ "server", "/data", "--console-address", ":9001" ]
    networks:
      - local
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-setup:
    image: minio/mc:latest
    depends_on:
      - minio
    networks:
      - local
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MinIO to start...';
      sleep 10;
      /usr/bin/mc alias set healthcare http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY};
      /usr/bin/mc mb healthcare/patient-documents --ignore-existing;
      /usr/bin/mc mb healthcare/profile-images --ignore-existing;
      /usr/bin/mc mb healthcare/medical-reports --ignore-existing;
      /usr/bin/mc mb healthcare/prescriptions --ignore-existing;
      /usr/bin/mc policy set public healthcare/profile-images;
      /usr/bin/mc policy set private healthcare/patient-documents;
      /usr/bin/mc policy set private healthcare/medical-reports;
      /usr/bin/mc policy set private healthcare/prescriptions;
      echo 'Healthcare buckets created and configured successfully!';
      "
networks:
  local:
    driver: bridge
